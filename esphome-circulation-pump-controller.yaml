substitutions:
  devicename: wh-circulation-
  upper_devicename: Water Heater Circulation

esphome:
  name: "wh-circulation"

esp32:
  board: esp32dev
  framework:
    type: arduino

# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: "D1XBLdjCVQMNj3YrrlzBsB64H7lh5HwXzpJKhMLg/4E="

  services:
      - service: motion_detected
        then:
          if:
            condition:
              and:
                - switch.is_on: circulationpumpmotion
                - lambda: 'return id(motiontimerreset) == true;'
            then:
              - logger.log: "Motion Pump Run"
              - lambda: 'id(motiontimerreset) = false;'
              - script.execute: pump_run

ota:
  password: "4c6230961f157cc5cd0ee0518d5a87b6"

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  power_save_mode: none
  
  manual_ip:
    static_ip: 192.168.1.241
    gateway: 192.168.1.1
    subnet: 255.255.255.0
    
  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "WH Circulation Hotspot"
    password: "im3A50bgmTfv"

captive_portal:

globals:
   - id: motiontimerreset
     type: bool
     restore_value: False
 

dallas:
  - pin: GPIO2
    update_interval: 10s

sensor:
  - platform: dallas
    address: 0x9f021319f117aa28
    name: Water In Temperature
    id: 'water_in_temp'

  - platform: dallas
    address: 0x570120598a043e28
    name: Water Loop Temperature
    id: 'water_return_temp'

  - platform: dallas
    address: 0x803c01f095189328
    name: Garage Outside Temperature
    id: 'garage_outside_temp'
    filters:
    - sliding_window_moving_average:
        window_size: 30
        send_every: 1
        send_first_at: 1

  - platform: dallas
    address: 0x113c01f095473228
    name: Garage WH Exhaust 

  - platform: dallas
    address: 0x043c01f0955d7a28
    name: Garage WH Temperature 

binary_sensor:
  - platform: template
    name: "Pump Running"
    id: pumprunning
    lambda: |-
      if (id(pump_run).is_running()) {
        return true;
      } else {
        return false;
      }

  - platform: template
    name: "Outside Freeze"
    id: "outside_freeze"
    lambda: |-
      if (id(garage_outside_temp).state <= 1) {
        return true;
      } else {
        return false;
      }

  - platform: template
    name: "Outside Deep Freeze"
    id: "outside_deep_freeze"
    lambda: |-
      if (id(garage_outside_temp).state <= -6) {
        return true;
      } else {
        return false;
      }

switch:     
  - platform: template
    name: "Water Heater Pump"
    id: circulationpumpon
    restore_state: true
    turn_on_action:
      - logger.log: "Circulation On"
      - script.execute: pump_run
      - switch.template.publish:
          id: circulationpumpon
          state: ON
    
    turn_off_action:
      - logger.log: "Circulation Off"
      - script.stop: pump_run
      - script.execute: pump_off
      - switch.template.publish:
          id: circulationpumpon
          state: OFF
    lambda: |-
      if (id(circulationpumpon).state) {
        return true;
      } else {
        return false;
      }

  - platform: template
    name: "Water Heater Pump Motion"
    id: circulationpumpmotion
    restore_state: true
    turn_on_action:
      - logger.log: "Circulation On"
      #- script.execute: pump_run
      - lambda: 'id(motiontimerreset) = true;'
      - switch.template.publish:
          id: circulationpumpmotion
          state: ON
    
    turn_off_action:
      - logger.log: "Circulation Off"
      - script.stop: pump_run
      - script.execute: pump_off
      - switch.template.publish:
          id: circulationpumpmotion
          state: OFF
    lambda: |-
      if (id(circulationpumpmotion).state) {
        return true;
      } else {
        return false;
      }

button:
  - platform: template
    name: Circulation Pump Once
    id: btnCirculateOnce

    # Optional variables:
    icon: "mdi:water-pump"
    on_press:
      - logger.log: "Button pressed"
      - script.execute: pump_run
          
# Status LED
status_led:
  pin: GPIO25

script:
  - id: pump_run
    mode: restart
    then:
      - output.turn_on: relayk1
      - output.turn_on: relayk2
      - delay: 5s
      - output.turn_on: relayk3
      - delay: 3min
      - output.turn_off: relayk1
      - output.turn_off: relayk2
      - output.turn_off: relayk3

  - id: pump_off
    mode: restart
    then:
      - output.turn_off: relayk1
      - output.turn_off: relayk2
      - output.turn_off: relayk3
      
interval:
  # for pump switch (normal pump run or deep freeze)
  - interval: 18min
    then:
      if:
        condition:
          or:
            - switch.is_on: circulationpumpon
            - binary_sensor.is_on: outside_deep_freeze
        then:
          - logger.log: "Interval Fire"
          - script.execute: pump_run

  # for pump motion switch (run pump only when motion)
  - interval: 18min
    then:
      if:
        condition:
          or:
            - switch.is_on: circulationpumpmotion
        then:
          - logger.log: "Interval Motion Reset"
          - lambda: 'id(motiontimerreset) = true;'

  # for freeze protection (run every 30 mins)
  - interval: 30min
    then:
      if:
        condition:
          and:
            - binary_sensor.is_off: outside_deep_freeze
            - binary_sensor.is_on: outside_freeze
        then:
          - logger.log: "Interval Fire"
          - script.execute: pump_run

output:
  - platform: gpio
    id: relayk1
    pin: GPIO21
  - platform: gpio
    id: relayk2
    pin: GPIO19
  - platform: gpio
    id: relayk3
    pin: GPIO18
  - platform: gpio
    id: relayk4
    pin: GPIO05